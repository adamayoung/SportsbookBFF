name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2

jobs:
  build-lambda:
    name: Build Lambda
    runs-on: ubuntu-latest
    container:
      image: swift:5.5.2-amazonlinux2
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Cache SPM
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Install dependencies
        run: yum -y install zip openssl-devel

      - name: Build
        run: swift build --product SportsbookBFFLambda -c release
      
      - name: Package
        run: scripts/package.sh SportsbookBFFLambda
      
      - name: Upload lambda artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-artifact
          path: .build/lambda
          if-no-files-found: error
          retention-days: 1

  build-SAM-template:
    name: Build SAM Template
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Validate SAM template
        run: sam validate

      - name: Build SAM template
        run: sam build

      - name: Upload SAM artifact
        uses: actions/upload-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam
          if-no-files-found: error
          retention-days: 1
    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-lambda, build-SAM-template]
    concurrency:
      group: prodDeployment
    environment:
      name: production
      url: ${{ steps.deploy.outputs.apigateway_url }}
    env:
      AWS_STACK: sportsbook
      DOMAIN_NAME: adam-young.co.uk
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: .build/lambda
      
      - name: Download SAM artifact
        uses: actions/download-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam
    
      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy
        id: deploy
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --resolve-s3 --stack-name "$AWS_STACK" --capabilities CAPABILITY_IAM --region "$AWS_REGION" --parameter-overrides DomainName="$AWS_STACK.$DOMAIN_NAME" CertificateArn="$AWS_CERTIFICATE_ARN"  AuthKey="$AUTH_KEY" TlaApiKey="$TLA_API_KEY" ScanBaseUrl="$SCAN_BASE_URL" SmpBaseUrl="$SMP_BASE_URL" CmsApiKey="$CMS_API_KEY" CmsBaseUrl="$CMS_BASE_URL"
          echo "::set-output name=apigateway_url::https://$AWS_STACK.$DOMAIN_NAME"
        env:
          AWS_CERTIFICATE_ARN: ${{ secrets.AWS_CERTIFICATE_ARN }}
          AUTH_KEY: ${{ secrets.API_AUTH_KEY }}
          TLA_API_KEY: ${{ secrets.TLA_API_KEY }}
          SCAN_BASE_URL: ${{ secrets.SCAN_BASE_URL }}
          SMP_BASE_URL: ${{ secrets.SMP_BASE_URL }}
          CMS_API_KEY: ${{ secrets.CMS_API_KEY }}
          CMS_BASE_URL: ${{ secrets.CMS_BASE_URL }}

      - name: Update DNS Record
        run: |
          HOST_NAME=$AWS_STACK.$DOMAIN_NAME
          API_GATEWAY_DOMAIN_NAME=$(aws apigatewayv2 get-domain-name --domain-name $HOST_NAME --query "DomainNameConfigurations[0].ApiGatewayDomainName" --output text)
          if [ "$API_GATEWAY_DOMAIN_NAME" == "" ]; then
            echo "ERROR: Could not find domain name $HOST_NAME in API Gateway"
            exit -1
          fi

          ZONE_ID=$(curl -s -X GET "$IONOS_BASE_URL/dns/v1/zones" -H "accept: application/json" -H "X-API-Key: $IONOS_API_KEY" | jq -r --arg DOMAIN_NAME "$DOMAIN_NAME" '.[] | select(.name==$DOMAIN_NAME) | .id')
          if [ "$ZONE_ID" == "" ]; then
            echo "ERROR: Domain name $DOMAIN_NAME not found"
            exit -2
          fi

          RECORD_ID=$(curl -s -X GET "$IONOS_BASE_URL/dns/v1/zones/$ZONE_ID?suffix=$DOMAIN_NAME&recordName=$HOST_NAME&recordType=CNAME" -H "accept: application/json" -H "X-API-Key: $IONOS_API_KEY" | jq -r --arg DOMAIN_NAME "$DOMAIN_NAME" '.records[] | .id')
          if [ "$RECORD_ID" == "" ]; then
            echo "ERROR: Record $HOST_NAME for $DOMAIN_NAME not found"
            exit -3
          else
            UPDATE_RESULT=$(curl -s -X PUT "$IONOS_BASE_URL/dns/v1/zones/$ZONE_ID/records/$RECORD_ID" -H "accept: */*" -H "X-API-Key: $IONOS_API_KEY" -H "Content-Type: application/json" -d "{\"disabled\":false,\"content\":\"$API_GATEWAY_DOMAIN_NAME\",\"ttl\":3600,\"prio\":0}")
            if [ "$UPDATE_RESULT" != "" ]; then
              echo "ERROR: Failed to update CNAME for $HOST_NAME to $API_GATEWAY_DOMAIN_NAME"
              exit -4
            fi

            echo "SUCCESS"
          fi
        env:
          IONOS_API_KEY: ${{ secrets.IONOS_API_KEY }}
          IONOS_BASE_URL: https://api.hosting.ionos.com
