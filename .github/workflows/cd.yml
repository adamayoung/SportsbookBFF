name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-lambda:
    name: Build Lambda
    runs-on: ubuntu-latest
    container:
      image: swift:5.5.2-amazonlinux2
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Cache SPM
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Install dependencies
        run: yum -y install zip openssl-devel

      - name: Build
        run: swift build --product SportsbookBFFLambda -c release
      
      - name: Package
        run: scripts/package.sh SportsbookBFFLambda
      
      - name: Upload lambda artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-artifact
          path: .build/lambda
          if-no-files-found: error
          retention-days: 1

  build-SAM-template:
    name: Build SAM Template
    runs-on: ubuntu-latest
    needs: build-lambda
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: .build

      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate SAM template
        run: sam validate

      - name: Build SAM template
        run: sam build

      - name: Upload SAM artifact
        uses: actions/upload-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam
          if-no-files-found: error
          retention-days: 1
    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-SAM-template
    environment:
      name: production
      url: ${{ steps.deploy.outputs.apigateway_url }}
    env:
      DOMAIN_NAME: sportsbook.adam-young.co.uk
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: .build/lambda
      
      - name: Download SAM artifact
        uses: actions/download-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam
    
      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy
        id: deploy
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --resolve-s3 --stack-name "$AWS_STACK" --capabilities CAPABILITY_IAM --region "$AWS_REGION" --parameter-overrides DomainName="$AWS_DOMAIN_NAME" CertificateArn="$AWS_CERTIFICATE_ARN"  AuthKey="$AUTH_KEY" TlaApiKey="$TLA_API_KEY" ScanBaseUrl="$SCAN_BASE_URL" SmpBaseUrl="$SMP_BASE_URL" CmsApiKey="$CMS_API_KEY" CmsBaseUrl="$CMS_BASE_URL"
          echo "::set-output name=apigateway_url::https://$AWS_DOMAIN_NAME"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_STACK: ${{ secrets.AWS_STACK }}
          AWS_DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
          AWS_CERTIFICATE_ARN: ${{ secrets.AWS_CERTIFICATE_ARN }}
          AUTH_KEY: ${{ secrets.API_AUTH_KEY }}
          TLA_API_KEY: ${{ secrets.TLA_API_KEY }}
          SCAN_BASE_URL: ${{ secrets.SCAN_BASE_URL }}
          SMP_BASE_URL: ${{ secrets.SMP_BASE_URL }}
          CMS_API_KEY: ${{ secrets.CMS_API_KEY }}
          CMS_BASE_URL: ${{ secrets.CMS_BASE_URL }}

      - name: Update DNS Records
        run: |
          API_GATEWAY_URL=$(aws apigatewayv2 get-apis --query "Items[?Name=='$AWS_STACK'].ApiEndpoint" --output text)
          API_GATEWAY_DOMAIN=$(sed "s/https:\/\///g" <<<"$API_GATEWAY_URL")
          echo Updating DNS for $AWS_DOMAIN_NAME to $API_GATEWAY_DOMAIN ...
         env:
          AWS_DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
