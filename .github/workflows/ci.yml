name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-sportsbookbff:
    name: Lint SportsbookBFF
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/realm/swiftlint:latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Lint
        run: swiftlint --strict

  test-build:
    name: Build and Test
    runs-on: ubuntu-latest
    container:
      image: swift:5.5.2-focal
      options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --security-opt apparmor=unconfined

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache SPM
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build
        run: swift build --build-tests

      - name: Test
        run: swift test --skip-build --parallel

  build-lambda:
    name: Build Lambda
    runs-on: ubuntu-latest
    container:
      image: swift:5.5.2-amazonlinux2
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Cache SPM
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Install dependencies
        run: yum -y install zip openssl-devel

      - name: Build
        run: swift build --product SportsbookBFFLambda -c release
      
      - name: Package
        run: scripts/package.sh SportsbookBFFLambda
      
      - name: Upload lambda artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-artifact
          path: .build/lambda
          if-no-files-found: error
          retention-days: 1

  build-SAM-template:
    name: Build SAM Template
    runs-on: ubuntu-latest
    needs: build-lambda
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: .build

      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Validate SAM template
        run: sam validate

      - name: Build SAM template
        run: sam build

      - name: Upload SAM artifact
        uses: actions/upload-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam/build
          if-no-files-found: error
          retention-days: 1
    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-SAM-template
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: .build
      
      - name: Download SAM artifact
        uses: actions/download-artifact@v2
        with:
          name: sam-artifact
          path: .aws-sam
    
      - name: Setup python 
        uses: actions/setup-python@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Deploy
        run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name dev --parameter-overrides AuthKey="$AUTH_KEY" TlaApiKey="$TLA_API_KEY" ScanBaseUrl="$SCAN_BASE_URL" SmpBaseUrl="$SMP_BASE_URL" CmsApiKey="$CMS_API_KEY" CmsBaseUrl="$CMS_BASE_URL"
        env:
          AUTH_KEY: ${{ secrets.AUTH_KEY }}
          TLA_API_KEY: ${{ secrets.TLA_API_KEY }}
          SCAN_BASE_URL: ${{ secrets.SCAN_BASE_URL }}
          SMP_BASE_URL: ${{ secrets.SMP_BASE_URL }}
          CMS_API_KEY: ${{ secrets.CMS_API_KEY }}
          CMS_BASE_URL: ${{ secrets.CMS_BASE_URL }}

      